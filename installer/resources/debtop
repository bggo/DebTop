#!/bin/bash
###############################################################################
# Debtop
#
# This script is the main debtop script, responsible for starting the chrooted
# system and/or programs inside the chroot jail.
#
# Its settings MUST be on /opt/DebTop/etc/main.cf
#
# Author: Diego Lima <diego@diegolima.org>
# License: GPLv3
###############################################################################

PROGRAM="${1}"

test -f /opt/DebTop/etc/main.cf && . /opt/DebTop/etc/main.cf
test -f /opt/DebTop/etc/extra.cf && . /opt/DebTop/etc/extra.cf


# Check the available X interfaces for showing messages.
# Use zenity for messages and warnings if available; otherwise fall back to xmessage
chooseMessenger(){
	if [ -x /usr/bin/zenity ]; then
		XGEN="/usr/bin/zenity --title=DebTop"

	else
		XGEN="/usr/bin/xmessage -center"
	fi
}
XINFO(){
	local TEXT="$@"
	killall zenity &> /dev/null
	if [ -x /usr/bin/zenity ]; then
		$XGEN --info --text="$TEXT"
	else
		$XGEN "$TEXT"
	fi
}
XINFONOWAIT(){
	local TEXT="$@"
	killall zenity &> /dev/null
	if [ -x /usr/bin/zenity ]; then
		$XGEN --info --text="$TEXT" &
	else
		$XGEN "$TEXT" &
	fi
}
XWARN(){
	local TEXT="$@"
	killall zenity &> /dev/null
	if [ -x /usr/bin/zenity ]; then
		$XGEN --warning --text="$TEXT"
	else
		$XGEN "$TEXT"
	fi
}
# This function collects a string provided by the user. It will set a
# variable XRETURN with the contents of the user input.
XENTRY(){
	local TEXT="$@"
	killall zenity &> /dev/null
	if [ -x /usr/bin/zenity ]; then
		XRETURN=`$XGEN --entry --text="$TEXT"`
	else
		#TODO: Pop up a terminal requesting the text input and write
		# the answer to /tmp so we can read it back. The terminal can
		# be started from inside the chrooted system
		#
		# Currently this will only work if debtop was started from the
		# command line
		read -p "$TEXT: " XRETURN
	fi

	if [ -z "$XRETURN" ]; then
		return 1
	else
		return 0
	fi
}
# Show Yes/No questions
XQUESTION(){
	local OHYEAH="$1"
	local OHNOES="$2"
	local TEXT="$3"

	killall zenity &> /dev/null
	if [ -x /usr/bin/zenity ]; then
		$XGEN --question --ok-label="$OHYEAH" --cancel-label="$OHNOES" --text="$TEXT"
		return $?
	else
		$XGEN -buttons "$OHNOES:1,$OHYEAH:0" $TEXT
		return $?
	fi
}



createLoopDevice() {
	if ! [ -f /tmp/debtop-loop ]; then
		LOOPCNT=50
	else
		LOOPCNT=`cat /tmp/debtop-loop`
		LOOPCNT=$(($LOOPCNT+1))
	fi
	sudo rm /tmp/debtop-loop
	echo $LOOPCNT > /tmp/debtop-loop

	if ! [ -b ${LOOPDEVICE}${LOOPCNT} ]; then
		sudo mknod -m600 ${LOOPDEVICE}${LOOPCNT} b 7 $LOOPCNT
        fi
}

doMount() {
	# Check if we're using an alternate partition on the SD card
	if ! [ -z $SDPART ]; then
		sudo mount | grep $SDPART &>/dev/null
		if [ $? != 0 ]; then
			echo "Mounting $SDPART on $MEDIA"
			sudo mount $SDPART $MEDIA || exit 1
		else
			true
		fi
	fi

	if ! [ -f $DISK  ]; then
		XWARN "I could NOT find your Linux disk. Please check that it exists on $DISK" 
		exit 2
	fi
	
	sudo mount | grep $DEBROOT &>/dev/null
	if [ $? != 0 ]; then
		createLoopDevice

		# Check the filesystem for errors
		sudo fsck -v -p $DISK
		local ERROR=$?
		if [ $ERROR = 0 ]; then
			echo "Filesystem check completed. No errors found"
		elif [ $ERROR = 1 ]; then
			echo "Filesystem contained errors but they've been fixed"
		else
			XQUESTION "Try to fix and mount anyway" "Cancel" "Your image filesystem contain errors that cannot be safely corrected automatically. 

We can try to fix them and mount anyway, or you can check the wiki and try to manually fix the disk yourself."  
			if [ $? == 0 ]; then 
				sudo fsck -v -y $DISK 
				if [ $? -gt 2 ]; then	
					XWARN "We could NOT fix your disk automatically. Please refer to the wiki on how to manually fix your disk."
					exit 7
				fi
			else
				exit 6
			fi
		fi

		echo "Mounting $DISK on $DEBROOT using ${LOOPDEVICE}${LOOPCNT}"
		sudo mount -o loop=${LOOPDEVICE}${LOOPCNT},noatime,data=journal $DISK $DEBROOT
		if [ $? != 0 ]; then
			doUmount
			XWARN "Could NOT mount $DISK. Please check that your SD card is working."
			exit 3
		fi

		# Make sure the mounted disk is valid or try to remount
		test -f $DEBROOT/bin/sh
		if [[ ( $? != 0 ) && ( $REMOUNTING -gt 2 ) ]]; then
			# Try to remount. For some reason mount reports the disk is mounted while it isn't
			# on the first time DebTop is started.
			echo "Image did not contain a valid shell. Trying to remount - $REMOUNTING."
			REMOUNTING=$(($REMOUNTING+1))
			doUmount
			doMount
		elif [[ ( $? != 0 ) && ( $REMOUNTING = 1 ) ]]; then
			>> /tmp/debtop-debug
			sudo mount >> /tmp/debtop-debug
			>> /tmp/debtop-debug
			sudo df >> /tmp/debtop-debug
			>> /tmp/debtop-debug
			ls $DEBROOT >> /tmp/debtop-debug
			doUmount
			XWARN "Your image does not contain a valid shell!"
			exit 5
		fi

	else
		# Make sure the mounted disk is valid or try to remount
		test -f $DEBROOT/bin/sh
		if [[ ( $? != 0 ) && ( $REMOUNTING -gt 2 ) ]]; then
			echo "Image did not contain a valid shell. Trying to remount - $REMOUNTING."
			REMOUNTING=$(($REMOUNTING+1))
			doUmount
			doMount
		elif [[ ( $? != 0 ) && ( $REMOUNTING = 1 ) ]]; then
			>> /tmp/debtop-debug
			sudo mount >> /tmp/debtop-debug
			>> /tmp/debtop-debug
			sudo df >> /tmp/debtop-debug
			>> /tmp/debtop-debug
			ls $DEBROOT >> /tmp/debtop-debug
			doUmount
			XWARN "Your image does not contain a valid shell!"
			exit 5
		fi
	fi
}
doUmount() {
	for i in `sudo mount|grep $DEBROOT|awk '{print $3}'|tac`; do
		sudo umount -l $i &> /dev/null
	done
}

sysChroot() {
	ACTION="sudo mount -o bind"

	test -d $DEBROOT/proc || sudo mkdir -p $DEBROOT/proc
	sudo mount | grep $DEBROOT/proc &>/dev/null|| \
		sudo $ACTION /proc $DEBROOT/proc &>/dev/null

	test -d $DEBROOT/dev || sudo mkdir -p $DEBROOT/dev
	sudo mount | grep $DEBROOT/dev &>/dev/null|| \
		sudo $ACTION /dev  $DEBROOT/dev &>/dev/null
	
	test -d $DEBROOT/dev/pts || sudo mkdir -p $DEBROOT/dev/pts
	sudo mount | grep $DEBROOT/dev/pts &>/dev/null|| \
		sudo $ACTION /dev/pts $DEBROOT/dev/pts &>/dev/null

	test -d $DEBROOT/dev/shm || sudo mkdir -p $DEBROOT/dev/shm
	sudo mount | grep $DEBROOT/dev/shm &>/dev/null|| \
		sudo $ACTION /dev/shm $DEBROOT/dev/shm &>/dev/null

	test -d $DEBROOT/sys || sudo mkdir -p $DEBROOT/sys
	sudo mount | grep $DEBROOT/sys &>/dev/null|| \
		sudo $ACTION /sys  $DEBROOT/sys &>/dev/null

	test -d $DEBROOT/tmp || sudo mkdir -p $DEBROOT/tmp
	sudo mount | grep $DEBROOT/tmp &>/dev/null|| \
		sudo $ACTION /tmp  $DEBROOT/tmp &>/dev/null

	test -d $DEBROOT/var/tmp || sudo mkdir -p $DEBROOT/var/tmp
	sudo mount | grep $DEBROOT/var/tmp &>/dev/null|| \
		sudo $ACTION /var/tmp $DEBROOT/var/tmp &>/dev/null

	test -d $DEBROOT/var/run/dbus || sudo mkdir -p $DEBROOT/var/run/dbus
	sudo mount | grep $DEBROOT/var/run/dbus &>/dev/null|| \
		sudo $ACTION /var/run/dbus $DEBROOT/var/run/dbus &>/dev/null

	test -d $DEBROOT/media/sdcard || sudo mkdir -p $DEBROOT/media/sdcard
	sudo mount | grep $DEBROOT/media/sdcard &>/dev/null|| \
		sudo $ACTION /sdcard $DEBROOT/media/sdcard &>/dev/null

	test -d $DEBROOT/media/sdcard-ext || sudo mkdir -p $DEBROOT/media/sdcard-ext
	sudo mount | grep $DEBROOT/media/sdcard-ext &>/dev/null|| \
		sudo $ACTION /sdcard-ext $DEBROOT/media/sdcard-ext &>/dev/null

	test -d $DEBROOT/home/adas || sudo mkdir -p $DEBROOT/home/adas
	sudo mount | grep $DEBROOT/home/adas &>/dev/null|| \
		sudo $ACTION /home/adas $DEBROOT/home/adas
}

doRun() {
	local RUN="${1}"
	#sudo chroot $DEBROOT dhclient &>/dev/null
	sudo cp /etc/resolv.conf $DEBROOT/etc/resolv.conf

	# Enable dead keys support
	if [ "x$DEADKEYS" = "xy" ]; then
		setxkbmap  -layout us -variant intl
	fi

	if ! [ -z "$RUN" ]; then
		killall zenity &> /dev/null
		sudo chroot $DEBROOT $RUN
	else
		killall zenity &> /dev/null
		sudo chroot $DEBROOT /usr/bin/lxterminal -e pdmenu
	fi
}

startLauncherManager() {
	#TODO: For now this just calls installLauncher(), but it should implement 3 things:
	# - Add new launcher (done)
	# - Remove launcher
	# - Edit launcher
	installLauncher
}

# Tries to automagically install a shortcut on the AWN bar to the user-specified application.
# This will work if the user types in the command used to call the program in the linux image.
installLauncher() {
	XENTRY "Please enter the name of the program you want to create the launcher to" || exit 0
	NEWLAUNCHER="$XRETURN"

	probeApp "$NEWLAUNCHER" 
	if [ $? != 0 ]; then
		XWARN "We could not find the specified program in your image. Please make sure you typed its name correctly."
		exit 8
	fi

	# Trim the path for use inside the chrooted system
	APPPATH="/`echo $APPPATH|cut -f 5- -d/`"

	createLauncher "$NEWLAUNCHER" "$APPPATH" "$APPICON"
	if [ $? != 0 ]; then
		XWARN "We could not create a launcher to the specified program. Please make sure you don't already have a launcher for the program"
		exit 9
	fi
}
probeApp(){
	local APP="$1"
	APPPATH=""

	test -z $APPPATH && APPPATH=`find $DEBROOT/bin -iname "$APP"`
	test -z $APPPATH && APPPATH=`find $DEBROOT/usr/bin -iname "$APP"`
	test -z $APPPATH && APPPATH=`find $DEBROOT/sbin -iname "$APP"`
	test -z $APPPATH && APPPATH=`find $DEBROOT/usr/sbin -iname "$APP"`
	test -z $APPPATH && APPPATH=`find $DEBROOT/usr/games -iname "$APP"`

	if ! [ -z "$APPPATH" ]; then
		echo "Looking for an icon..."
		# Try to find a suitable icon for the application if it was found
		APPICON=`find $DEBROOT/usr/share/icons -iname *${APP}*.png|grep 48x48|tail -1` || \
		APPICON=`find $DEBROOT/usr/share/icons -iname *${APP}*.png|grep 16x16|tail -1` || \
		APPICON=`find $DEBROOT/usr/share/icons -iname *${APP}*.png|tail -1` || \
		APPICON=""
		echo "$APPICON"
	else
		return 1
	fi
}
createLauncher() {
	local APPNAME="$1"
	local APPDEST="$2"
	local APPICON="$3"

	# Never trust others
	test -z "$APPNAME" && return 1
	test -z "$APPDEST" && return 1

	if [ -z $APPICON ]; then
		APPICON="debian.png"
	else
		cp $APPICON /opt/DebTop/icons
		APPICON=`basename $APPICON`
	fi

	local MYAPP="`echo /usr/share/applications/debtop-"${APPNAME}".desktop|tr [:upper:] [:lower:]`"

	# Create a new entry if we don't already have one;
	# Otherwise just go aheand and add the launcher to the AWN bar.
	if ! [ -e "$MYAPP" ]; then
		sudo touch "$MYAPP"
		sudo chmod 666 "$MYAPP"
		echo "[Desktop Entry]
Encoding=UTF-8
Name=$APPNAME
GenericName=$APPNAME
TryExec=/usr/sbin/debtop $APPDEST
Exec=/usr/sbin/debtop $APPDEST
Icon=/opt/DebTop/icons/${APPICON}
Type=Application" > "$MYAPP"
		sudo chmod 644 "$MYAPP"
	fi

	echo "Adding $MYAPP to launcher list..."
	local LAUNCHERS=`gconftool -g /apps/avant-window-navigator/window_manager/launchers|cut -f2 -d[|cut -f1 -d]`
	local LAUNCHERS="$LAUNCHERS,$MYAPP"
	echo "$LAUNCHERS"

	gconftool -s /apps/avant-window-navigator/window_manager/launchers "[$LAUNCHERS]" --type list --list-type string || return 1
}

xhost + &>/dev/null
chooseMessenger

if [ "$PROGRAM" == "stop" ]; then
	echo "Stopping DebTop"
	doUmount
elif [ "$PROGRAM" == "launcher-manager" ]; then
	doMount
	sysChroot mount
	startLauncherManager
else
	echo "Starting DebTop"
	XINFONOWAIT "Launching DebTop. This may take a while..."
	doMount
	sysChroot mount
	doRun "$PROGRAM"
fi
